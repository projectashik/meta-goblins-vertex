// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// enum type for type field
enum Type {
  edible
  non_edible
}

enum Role {
  admin
  vendor
  individual
  collector
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            Int         @id @default(autoincrement())
  email         String?     @unique
  otp           String?
  otpExpiry     DateTime?
  emailVerified DateTime?
  accounts      Account[]
  name          String
  phone         String
  latitude      String
  longitude     String
  wallet        String?
  pan           String?
  type          Type?
  role          Role
  Listings      Listings[]
  Session       Session[]
  Confirmed     Confirmed[]
}

model Listings {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  latitude    String?
  longitude   String?
  type        Type
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Confirmed   Confirmed[]

  @@index([userId])
}

model Confirmed {
  id          Int       @id @default(autoincrement())
  listingId   Int
  userId      Int
  receivedAt  DateTime?
  is_received Boolean?
  is_sent     Boolean?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  listing Listings @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([userId])
}

model Otp {
  id        Int      @id @default(autoincrement())
  otp       String
  otpExpiry DateTime
  for       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
